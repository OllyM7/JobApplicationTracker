import React, { createContext, useState, useEffect } from 'react';
import axios from 'axios';

// Create the authentication context
export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Initialize auth state from localStorage on component mount
    useEffect(() => {
        const token = localStorage.getItem('token');
        const userRoles = localStorage.getItem('userRoles');
        const userEmail = localStorage.getItem('userEmail');
        
        if (token && userRoles) {
            // Set up axios default headers for all requests
            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            
            setUser({
                token,
                roles: JSON.parse(userRoles),
                email: userEmail
            });
        }
        
        setLoading(false);
    }, []);

    // Login function
    const login = async (email, password) => {
        try {
            setLoading(true);
            const response = await axios.post('https://localhost:7116/api/auth/login', { email, password });
            
            const { token, roles } = response.data;
            
            // Save auth data to localStorage
            localStorage.setItem('token', token);
            localStorage.setItem('userRoles', JSON.stringify(roles));
            localStorage.setItem('userEmail', email);
            
            // Set up axios default headers for all requests
            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            
            setUser({
                token,
                roles,
                email
            });
            
            setError(null);
            return true;
        } catch (err) {
            setError(err.response?.data?.message || 'Login failed');
            return false;
        } finally {
            setLoading(false);
        }
    };

    // Register function
    const register = async (email, password) => {
        try {
            setLoading(true);
            const response = await axios.post('https://localhost:7116/api/auth/register', { email, password });
            
            const { token, roles } = response.data;
            
            // Save auth data to localStorage
            localStorage.setItem('token', token);
            localStorage.setItem('userRoles', JSON.stringify(roles));
            localStorage.setItem('userEmail', email);
            
            // Set up axios default headers for all requests
            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            
            setUser({
                token,
                roles,
                email
            });
            
            setError(null);
            return true;
        } catch (err) {
            setError(err.response?.data?.message || 'Registration failed');
            return false;
        } finally {
            setLoading(false);
        }
    };

    // Logout function
    const logout = () => {
        // Clear localStorage
        localStorage.removeItem('token');
        localStorage.removeItem('userRoles');
        localStorage.removeItem('userEmail');
        
        // Remove the default Authorization header
        delete axios.defaults.headers.common['Authorization'];
        
        // Reset state
        setUser(null);
    };
    
    // Check if user has a specific role
    const hasRole = (role) => {
        if (!user || !user.roles) return false;
        return user.roles.includes(role);
    };
    
    // Check if user is authenticated
    const isAuthenticated = () => {
        return !!user;
    };
    
    // Check if user is an admin
    const isAdmin = () => {
        return hasRole('Admin');
    };
    
    // Provide the auth context value
    const contextValue = {
        user,
        loading,
        error,
        login,
        register,
        logout,
        hasRole,
        isAuthenticated,
        isAdmin
    };
    
    return (
        <AuthContext.Provider value={contextValue}>
            {children}
        </AuthContext.Provider>
    );
};